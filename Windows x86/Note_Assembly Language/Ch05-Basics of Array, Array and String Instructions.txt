#5. Array

<5.1 Basics>
RV) Arrays in C:
	To access elements in an array, we need...
	i)   address of 1st element
	ii)  size of one element [byte]
	iii) index (unsigned)

Arrays in Assembly:
	i)  Defining arrays in data, bss segment
		eg)
		segment .data
			arr1 dd 1,2,3,4,5,6,7,8,9,10
			arr2 dw 0,0,0,0,0,0,0,0,0,0
			arr3 times 10 dw 0			;same with arr3 dw 0,0,0,0,0,0,0,0,0,0
			arr4 times 200 db 0			; 0, ... , 0, 1, ... , 1
			     times 100 db 1
		
		segment .bss
			arr5 resd 10
			arr6 resw 100
	
	ii) Accessing elements in an array
		Caution) byte array
		segment .data
			array1 db 5,4,3,2,1
			
		segment .text
			mov ebx, array1 ; EBX = &array1[0]
			mov dx, 0 ; unsigned short sum
			mov ah, 0 ; use high 1 byte ONLY
			mov ecx, 5
		lp:
			mov al, [ebx] ; AL = *EBX
			add dx, ax ; DX += AX (NOT AL! Operands of ADD should have same size!)
			inc ebx ; bx++
			loop lp
		
		Tip) |5 |4 |3 |2 |1 |? |
		     |AL|AH|
		     | AX  |
	
	iii)Indirect Addressing
		[(base reg.) + (factor) * (index reg.) + (const.)]
		
		base reg.  - EAX, EBX, ECX, EDX, EBP, ESP, ESI, EDI
		factor     - (1), 2, 4, 8
		index reg. - EAX, EBX, ECX, EDX, EBP,      ESI, EDI
		const.     - 32-bit integer, label
		
		eg)
			dword [array + 4*esi]	;array[ESI] ( int array[ARRAY_SIZE] )
			dword [ebx + 4*esi]		;array[ESI] ( EBX == array )

Multidimensional Array: C/C++ -> row-wise
	for array[D][R][C], array[i][j][k] == *(array + R*C*i + C*j + k) //D: Depth, R: Row, C: Column
	
================================================================

<5.2 Array/String Instructions>
Caution) ONLY for 80x86!

RV) DF (Direction Flag) determines
    whether index register(s) should be increased or decreased by 1
    after using string instructions.

i) Clear/Setting DF (IMPORTANT!!)
	CLD		;DF = 0, increase
	STD		;DF = 1, decrease

ii) Load/Store from String Byte/Word/DWord (Use ECX as counter.)
	LODSB, LODSW, LODSD		;use ESI (Src.)
	STOSB, STOSW, STOSD		;use EDI (Dst.)
	
	Tip)
	;LODSD means...
	EAX = [DS:ESI]			;DS (Data Segment)
	ESI = ESI ± 4			;ESI = (!DF)? ESI+4: ESI-4
	
	;STOSD means...
	[ES:EDI] = EAX			;ES (Extra Segment)
	EDI = EDI ± 4			;ESI = (!DF)? EDI+4: EDI-4
	
	eg)
	segment .data
		array1 dd 1,2,3,4,5,6,7,8,9,10
	
	segment .bss
		array2 resd 10
	
	segment .text
		cld
		mov esi, array1
		mov edi, array2
		mov ecx, 10
		
	lp:						;same with REP MOVSD
		lodsd
		stosd
		loop lp
		;same with MOVSD

iii) Move String Byte/Word/DWord
	MOVSB, MOVSW, MOVSD
	
	Tip)
	;MOVSD means...
	dword [ES:EDI] = dword [DS:ESI]
	ESI = ESI ± 4
	EDI = EDI ± 4

iv) Compare/Scan String Byte/Word/DWord
	Tip) Remember how CMP sets flags.
	CMPSB, CMPSW, CMPSD - compare [DS:ESI]  with [ES:EDI]
	SCASB, SCASW, SCASD - compare AL/AX/EAX with [ES:EDI]

v) Repeat (command prefix, Use ECX as counter.)
	REP          - repeat
	eg) REP MOVSD
	
	REPE, REPZ   - repeat while ZF == 1
	REPNE, REPNZ - repeat while ZF == 0